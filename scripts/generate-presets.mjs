// @ts-nocheck
import fs from "fs/promises";
import { existsSync } from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { KEY_MAPPINGS } from "./key-mappings.mjs";

const INPUT_DIR_NAME = "src/lib/presets/ini";
const DEFAULT_THEME_FILENAME = "DefaultColors.ini";
const OUTPUT_DIR_NAME = "src/lib/presets";
const OUTPUT_FILENAME = "index.ts";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function parseINIString(data) {
  const regex = {
    section: /^\s*\[\s*([^\]]*)\s*\]\s*$/,
    param: /^\s*([^=]+?)\s*=\s*(.*?)\s*$/,
    comment: /^\s*;.*$/,
  };
  const value = {};
  const lines = data.split(/[\r\n]+/);
  let section = null;
  lines.forEach((line) => {
    if (regex.comment.test(line)) return;
    else if (regex.param.test(line)) {
      const match = line.match(regex.param);
      if (section) value[section][match[1].trim()] = match[2].trim();
      else value[match[1].trim()] = match[2].trim();
    } else if (regex.section.test(line)) {
      const match = line.match(regex.section);
      value[match[1]] = {};
      section = match[1];
    } else if (line.length == 0 && section) section = null;
  });
  return value;
}

function generateThemeType() {
  return `export type Theme = {
  [Section in keyof typeof initialThemeData]: {
    [ColorKey in keyof typeof initialThemeData[Section]]: string;
  };
};`;
}

function migrateTheme(parsedPreset, defaultTheme) {
  const migratedTheme = JSON.parse(JSON.stringify(defaultTheme));
  for (const section in parsedPreset) {
    if (!migratedTheme[section]) continue;
    const sectionMappings = KEY_MAPPINGS[section] || {};
    for (const oldKey in parsedPreset[section]) {
      const value = parsedPreset[section][oldKey];
      const newKey = sectionMappings[oldKey] || oldKey;
      if (migratedTheme[section].hasOwnProperty(newKey)) {
        migratedTheme[section][newKey] = value;
      }
    }
  }
  return migratedTheme;
}

async function main() {
  console.log("üöÄ Starting unified presets and type generation...");

  const inputDir = path.join(__dirname, "..", INPUT_DIR_NAME);
  const outputDir = path.join(__dirname, "..", OUTPUT_DIR_NAME);
  const outputFilePath = path.join(outputDir, OUTPUT_FILENAME);
  const defaultThemePath = path.join(inputDir, DEFAULT_THEME_FILENAME);

  try {
    if (!existsSync(defaultThemePath)) {
      throw new Error(
        `Source of truth '${DEFAULT_THEME_FILENAME}' not found in '${inputDir}'.`,
      );
    }

    const defaultContent = await fs.readFile(defaultThemePath, "utf-8");
    const defaultThemeObject = parseINIString(defaultContent);
    console.log(
      "- Successfully parsed the default theme as the source of truth.",
    );

    const themeTypeString = generateThemeType();
    console.log("- Successfully generated the 'Theme' type definition.");

    const allFiles = await fs.readdir(inputDir);
    const presets = [];

    console.log(`- Found ${allFiles.length} total .ini files. Processing...`);
    for (const file of allFiles.filter((f) => f.endsWith(".ini"))) {
      const filePath = path.join(inputDir, file);
      const content = await fs.readFile(filePath, "utf-8");
      const parsedPreset = parseINIString(content);
      const finalThemeData = migrateTheme(parsedPreset, defaultThemeObject);
      const name = path
        .basename(file, ".ini")
        .replace(/_/g, " ")
        .replace(/\b\w/g, (c) => c.toUpperCase());
      presets.push({ name, themeData: finalThemeData });
    }
    console.log("- Successfully parsed and migrated all preset files.");

    const fileContentString = `// This file is auto-generated by the 'generate-presets.mjs' script.
// Do not edit this file directly, as your changes will be overwritten.
// Generated from: ${INPUT_DIR_NAME}
// Generated at: ${new Date().toISOString()}

export const initialThemeData = ${JSON.stringify(defaultThemeObject, null, 2)};

${themeTypeString}

export type Preset = {
  name: string;
  themeData: Theme;
};

export const presets: Preset[] = ${JSON.stringify(presets, null, 2)};
`;

    if (!existsSync(outputDir)) await fs.mkdir(outputDir, { recursive: true });
    await fs.writeFile(outputFilePath, fileContentString);

    console.log(
      `\n\x1b[32m‚úÖ Success! Unified presets file created at:\x1b[0m`,
    );
    console.log(`   ${outputFilePath}`);
  } catch (error) {
    console.error(`\n\x1b[31m‚ùå Error during generation:\x1b[0m`);
    console.error(error.message);
    process.exit(1);
  }
}

main();
